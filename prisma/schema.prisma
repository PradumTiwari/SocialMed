generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  email      String  @unique
  username   String  @unique
  clerkId    String  @unique
  name       String?
  bio        String?
  image      String?
  location   String?
  website    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  followers   Follows[] @relation("following")
  following   Follows[] @relation("follower")
  notifications           Notification[] @relation("userNotifications")
  notificationsCreated    Notification[] @relation("notificationCreator")
  bookMarks    BookMark[]
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String
  image     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes        Like[]
  notifications Notification[]
  bookMarks BookMark[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]
  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId]) // Prevents a user from liking the same post twice
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("follower",fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following",fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@id([followerId, followingId])
}

model Notification {
  id         String   @id @default(cuid())
  userId     String  
  creatorId  String 
  type       NotificationType
  read       Boolean 
  postId     String?
  commentId  String?
  createdAt DateTime @default(now())

  // Relations
   user    User @relation(name: "userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User? @relation(name: "notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)


 @@index([userId, creatorId])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}



model BookMark{
  id String @id @default(cuid()) @unique
  postId String
  userId String
  Post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  
   @@unique([postId, userId])


}